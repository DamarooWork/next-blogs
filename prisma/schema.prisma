// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  nickmane String
  avatar   String?
  role     UserRole @default(USER)

  verified         DateTime?
  verificationCode VerificationCode?

  provider   String?
  providerId String?

  blogs Blog[]
  comments Comment[]
  likes    Like[]
   
}

enum UserRole {
  USER
  ADMIN
}

model VerificationCode {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code      String
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Blog {
  id           Int      @id @default(autoincrement())
  title        String
  content      String[]
  previewImage String
  published    Boolean  @default(true)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes    Like[]
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String

  authorId Int
  author   User   @relation(fields: [authorId], references: [id])

  blogId   Int
  blog     Blog   @relation(fields: [blogId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id Int @id @default(autoincrement())

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
